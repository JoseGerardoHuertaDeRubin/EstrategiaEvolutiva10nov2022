import numpy as np
import math
from random import random
from random import gauss
from matplotlib import pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

def f(x1,x2,x3): #Para definir la función objetivo
    f = x1 + 2*x2 + x2*x3 - x1**2 - x2**2 - x3**2 #Función dada en el problema
    return f

def path(u,v,w): #Muestra el recorrido, según los resultados de cada iteración
    plt.figure(1)
    plt.axes(projection = '3d')
    plt.plot(u, v, w, 'r^-')
    plt.plot([u[0],u[-1]], [v[0],v[-1]], [w[0],w[-1]], 'bo')
    plt.xlim([-2, 2])
    plt.ylim([-2, 2])
    plt.grid()
    plt.title('Estrategia Evolutiva EE 1+1');
    
def evol(u,v,w): #Grafica la trayectoria; u guarda las x1, v guarda las x2 y w guarda las x3
    plt.figure(2)
    plt.plot(u)
    plt.plot(v)
    plt.plot(w)
    plt.legend(('x1','x2','x3'))
    plt.ylim([-2, 2])
    
    plt.show()

def mutation(x,s): #Para mutar el valor actual
    xn = x+s*gauss(0,1) #Al valor actual, se le suma un valor s, afinado con distribución normal
    while xn < -2 or xn > 2:
        xn = x+s*gauss(0,1)
    return xn

def sigma(s,g,m):
    ps = m/g #Tasa de mutaciones exitosas
    c = 0.817
    if g%20 == 0: #Otra regla de dedo para optimizar tiempo de cómputo, cada 20 iteraciones
    #if True:
        if ps > 0.2: #Según regla de dedo, 20%
            s = s/c
        elif ps < 0.2:
            s = s*c
        else:
            s = s
    else:
        s = s
    return s
    
def main():
  
    x1min, x1max, x2min, x2max, x3min, x3max  = [-2, 2, -2, 2, -2, 2] #Son los límites del espacio de soluciones
    gmax = 500;           #máximo número de iteraciones
    m = 0;                 #número de mutaciones exitosas
    c = 0.817; #Constante para mantener regulado el valor de sigma
    x1 = 4*random()+x1min #Valor inicial de x1
    x2 = 4*random()+x2min #Valor inicial de x2
    x3 = 4*random()+x3min #Valor inicial de x3
    x10x20x30 = [round(x1,6), round(x2,6), round(x3,6)] #Contiene x, y iniciales
    print("x1_0,x2_0,x3_0: ",x10x20x30)
    padre = f(x1,x2,x3) #El padre inicial, la función evaluada en las x, y iniciales
    s = 1
    u = [x1]
    v = [x2]
    w = [x3]
    
    for g in range(1,gmax): #ES LO CENTRAL DEL ALGORITMO, la graficación es accesorio
        x1n = mutation(x1,s) #Nuevo individuo es mutación del padre, en x1
        x2n = mutation(x2,s) #Nuevo individuo es mutación del padre, en x2
        x3n = mutation(x3,s) #Nuevo individuo es mutación del padre, en x3
        hijo = f(x1n,x2n,x3n) #Obtiene hijo, evaluando en función
        if hijo > padre: #El mejor es el mayor por ser maximización
            x1 = x1n
            x2 = x2n
            x3 = x3n
            m += 1               #mutación exitosa
            padre = f(x1,x2,x3)
        else:
            x1 = x1
            x2 = x2
            x3 = x3
            m = m
        s = sigma(s,g,m)
        u.append(x1)
        v.append(x2)
        w.append(x3)
        
    x1fx2fx3f = [round(x1,6), round(x2,6), round(x3,6)]
    print("x1_f,x2_f,x3_f: ",x1fx2fx3f)
    print("f(x1_f,x2_f,x3_f)*: ",f(x1,x2,x3))
    #print("u: ",u)
    #print("v: ",v)
    #print("w: ",w)
    #surface()
    path(u,v,w)
    evol(u,v,w)
    
main()
